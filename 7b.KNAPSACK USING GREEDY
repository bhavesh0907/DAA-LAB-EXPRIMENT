#include <stdio.h>
#include <stdlib.h>

// Structure for an item which stores its value and weight
typedef struct Item {
    int value;
    int weight;
} Item;

// Function to compare items based on their value per unit weight (value/weight)
int compare(const void* a, const void* b) {
    Item* item1 = (Item*)a;
    Item* item2 = (Item*)b;
    double ratio1 = (double)item1->value / item1->weight;
    double ratio2 = (double)item2->value / item2->weight;
    if (ratio1 > ratio2)
        return -1;
    else if (ratio1 < ratio2)
        return 1;
    else
        return 0;
}

// Function to find the maximum value that can be obtained by selecting items using the greedy approach
int fractionalKnapsack(Item items[], int n, int capacity) {
    // Sort the items based on their value per unit weight in non-increasing order
    qsort(items, n, sizeof(Item), compare);

    int totalValue = 0;  // Initialize the total value to 0
    int currentWeight = 0;  // Initialize the current weight to 0

    // Iterate through all the items
    for (int i = 0; i < n; i++) {
        // If adding the current item doesn't exceed the capacity, add it fully
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // If adding the current item exceeds the capacity, add the fraction of the item that fits
            int remainingCapacity = capacity - currentWeight;
            totalValue += items[i].value * ((double)remainingCapacity / items[i].weight);
            break;
        }
    }

    return totalValue;
}

// Driver program to test above functions
int main() {
    Item items[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(items) / sizeof(items[0]);
    int capacity = 50;
    int maxValue = fractionalKnapsack(items, n, capacity);
    printf("Maximum value that can be obtained: %d\n", maxValue);
    return 0;
}
